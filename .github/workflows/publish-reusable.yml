name: SDK publish

on:
  workflow_call:
    inputs:
      branch:
        required: true
        type: string
 
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Log
        run: echo "SNAPSHOT release"
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
      - name: lint check
        run: ./gradlew --no-daemon check

  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
      - name: unit tests
        run: ./gradlew --no-daemon testDebugUnitTest

  build:
    needs: [lint, unit-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'
      - name: build project
        run: ./gradlew --no-daemon assembleDebug

  set-tag:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
      - name: Extract SDK version
        run: |
            SDK_VERSION=$(grep '^SDK_VERSION_NAME=' gradle.properties | cut -d '=' -f2)
            echo "SDK_VERSION=$SDK_VERSION" >> $GITHUB_ENV
            echo "Extracted SDK version: $SDK_VERSION"
      - name: Create tag
        run: |
            git tag ${{ env.SDK_VERSION }}
            git push origin ${{ env.SDK_VERSION }}

  publish:
    needs: [set-tag]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'
      - name: Prepare to publish
        run: |
          echo '${{secrets.GPGKEYCONTENTS}}' | base64 -d > /tmp/publish_key.gpg
          gpg --quiet --batch --yes --decrypt --passphrase="${{secrets.SECRETPASSPHRASE}}" \
          --output /tmp/secret.gpg /tmp/publish_key.gpg
          echo -e "\nsigning.password=$signingpassword" >> gradle.properties
          echo -e "\nsigning.keyId=$signingkeyId" >> gradle.properties
          echo -e "\nsigning.secretKeyRingFile=/tmp/secret.gpg" >> gradle.properties
          echo -e "\nSONATYPE_CONNECT_TIMEOUT_SECONDS=60" >> gradle.properties
          echo -e "\nSONATYPE_CLOSE_TIMEOUT_SECONDS=900" >> gradle.properties
        env:
          ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{secrets.signingpassword}}
          ORG_GRADLE_PROJECT_signingInMemoryKeyId: ${{secrets.signingkeyId}}
          SECRETPASSPHRASE: ${{secrets.SECRETPASSPHRASE}}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{secrets.GPGKEYCONTENTS}}
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{secrets.CENTER_PORTAL_USERNAME}}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{secrets.CENTER_PORTAL_PASSWORD}}
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'

      - name: Publish to Central Portal
        run: ./gradlew publishAndReleaseToMavenCentral --no-configuration-cache

  release-github:
    needs: [publish]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
      - name: Github Release generation
        run: ./.github/git-release-ci.sh
        env:
          GH_TOKEN: ${{ github.token }}

  merge:
    needs: [publish]
    if: |
      startsWith(github.head_ref, 'release') && 
      github.base_ref == 'master'
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.PAT_FOR_TRIGGERING_BRANCH_PROTECTION }}
    steps:
      - name: Checkout develop branch
        uses: actions/checkout@v4
        with:
          ref: develop
      - name: Create Pull Request
        run: gh pr create --base develop --head master --title "Merge 'master' into 'develop' after release" --body "Automated Pull Request to merge 'master' into 'develop' after release"
      - name: Merge Pull Request
        run: |
          pr_number=$(gh pr list --base develop --head master --json number --jq '.[0].number')
          gh pr merge $pr_number --merge --auto

  message-to-loop-if-success:
    needs: [release-github]
    runs-on: ubuntu-latest
    steps:
      - name: Send message to LOOP
        env:
            LOOP_NOTIFICATION_WEBHOOK_URL: ${{ secrets.LOOP_NOTIFICATION_WEBHOOK_URL }}
            VERSION: ${{ github.ref_name }}
        run: |
            MESSAGE=$(cat <<EOF
            {
              "text": "**ðŸ¤– Android release was successful. Version: ${VERSION}**"
            }
            EOF)
            curl -X POST "$LOOP_NOTIFICATION_WEBHOOK_URL" \
              -H "Content-Type: application/json" \
              -d "$MESSAGE"
